{"pages":[],"posts":[{"title":"Webassembly struct","text":"preamble8byte 0-4bit: magic number (0x00 0x61 0x73 0x6D, which is \\0asm) 5-8byte: version (0x01 0x00 0x00 0x00, which is 1) sectionssection index+size+contents 1.section index Known sections: 0x01 to 0x0b to represent for “Type” to “Data” in table. Known sections can be included only once and must appear in a specific order. Custom sections:(not sure now, use ox01 for dylink section) 2.size LEB (for example: 5457264 is 0xf0 0x8a 0xcd 0x02, last byte less than 128(0x80)) 12345678910111213141516171819202122232425262728293031323334353637void ToLEB(int x, unsigned char** ppOut, size_t* pOutSize){ if(x &lt; 0) return; unsigned char ret[sizeof(int)]; int index=0; while(true) { unsigned char byte = x &amp; 127; x &gt;&gt;= 7; bool more = x != 0; if(more) byte = byte | 128; ret[index++] = byte; if(!more) break; } unsigned char* pOut=(unsigned char*)malloc(index); memcpy(pOut,ret,index); *pOutSize = index; *ppOut = pOut;}int GetLEB(const unsigned char* pInput) { int next = 0; int ret = 0; int mul = 1; while (1) { unsigned char byte = pInput[next++]; ret += (byte &amp; 127) * mul; mul *= 128; if (!(byte &amp; 128)) break; } return ret;}","link":"/2020/08/15/Webassembly%20struct/"},{"title":"Webassembly dynamic libraries main module &amp; side module","text":"Main modoule &amp; Side moduleThere are two types of shared modules: Main modules, which have system libraries linked in. Side modules, which do not have system libraries linked in. Side modules are created by including the SIDE_MODULE flag when compiler with Emscripten., will not generate the JavaScript file or include any system library functions in the module. Main modules are created using the MAIN_MODULE flag. This flag tells the Emscripten compiler to include system libraries for dynamic linking. How to create main module &amp; side moduleCoreA.cpp 123456789101112131415161718192021222324252627282930#ifdef __EMSCRIPTEN__#include&lt;emscripten.h&gt;#endif#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Multipy(int a, int b); //EMSCRIPTEN_KEEPALIVE forces LLVM to not dead-code-eliminate a function.This also exports the function, as if you added it to EXPORTED_FUNCTIONS.#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Add(int a, int b){ return a+b;}#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallMultipyInSideC(int a, int b){ return Multipy(a,b);}#ifdef __cplusplus}#endif SideB.cpp 1234567891011121314151617181920212223242526#include&lt;emscripten.h&gt;#include&lt;stdio.h&gt;#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Add(int a, int b);#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallAddInCoreA(int a, int b){ return Add(a,b);} #ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Substract(int a, int b){ return a-b;} #ifdef __cplusplus}#endif SideC.cpp 12345678910111213141516171819202122232425#include&lt;emscripten.h&gt;#include&lt;stdio.h&gt;#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Substract(int a, int b);#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallSubstractInSideB(int a, int b){ return Substract(a,b);} #ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Multipy(int a, int b){ return a*b;}#ifdef __cplusplus}#endif 12345emcc CoreA.cpp -O2 -s MAIN_MODULE=1 -s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME=CoreModule -s ALLOW_MEMORY_GROWTH=1 -fPIC -s EXPORT_ALL=1 -s EXTRA_EXPORTED_RUNTIME_METHODS=['ccall','stringToUTF8','UTF8ToString','loadDynamicLibrary'] -o CoreA.js//EXTRA_EXPORTED_RUNTIME_METHODS add 'loadDynamicLibrary' to manually load side module when you needemcc SideB.cpp -s SIDE_MODULE=2 -O2 -o SideB.wasmemcc SideC.cpp -s SIDE_MODULE=2 -O2 -o SideC.wasm Different options for dynamic linking1.dlopen2.dynamicLibraries3.loadDynamicLibrary","link":"/2020/08/16/Webassembly%20dynamic%20libraries/"}],"tags":[{"name":"WebAssembly","slug":"WebAssembly","link":"/tags/WebAssembly/"},{"name":"Emscripten","slug":"Emscripten","link":"/tags/Emscripten/"}],"categories":[{"name":"WebAssembly","slug":"WebAssembly","link":"/categories/WebAssembly/"},{"name":"Emscripten","slug":"Emscripten","link":"/categories/Emscripten/"}]}