{"pages":[],"posts":[{"title":"WebAssembly struct","text":"WebAssembly二进制结构解析WebAssembly码的单位是module，二进制文件扩展名”.wasm”。一个module由一个header和跟在后面的若干个sections组成。有的sections描述与其他modules的交互（import和export），有的sections声明了数据和module使用到的其它实现，有的sections定义了functions。 考虑到size和解码效率，Webassembly modules使用二进制形式编码。考虑到可读性，它们可以无损地翻译成文本形式。 更多详情请参考：WebAssembly Reference Manual BasicsBytesBytes 在WebAssembly中是8-bit，也是linear-memory访问的寻址单位。 PagesPages在WebAssembly中是64KiB，也是linear-memory的size声明和size操作中使用的单位。 Linear Memories一个linear memory 是一段连续的、以byte寻址、可读写，从偏移量0扩展到linear-memorysize 的内存范围，作为WebAssembly实例的一部分被分配。linear memory 的size总是page size 的倍数，并且可以动态地增加（使用 memory.grow指令），做多增加到一个可选声明的maximum length。 Tables一个table与一个linear memory相似，不过其元素不是byte而是不透明的值每个table都有一个table element type表明它们持有什么类型的数据。一个anyfunc的 table 被用来作为indirect calls的索引空间。 Tables 可以由一个module来定义，也可以从外部import。 Encoding TypesPrimitive Encoding TypesPrimitive encoding types是用来代表在Module中的字段的基本类型。 类型名 Size (bytes) 描述 uint32 4 unsigned; 值限制为32 bits varuint1 1 unsigned LEB128; 值限制为1 bit varuint7 1 unsigned LEB128; 值限制为7 bits varuint32 1-5 unsigned LEB128; 值限制为32 bits varuint64 1-10 unsigned LEB128; 值限制为64 bits varsint7 1 [signed LEB128]; 值限制为7 bits varsint32 1-5 [signed LEB128]; 值限制为32 bits varsint64 1-10 [signed LEB128]; 值限制为64 bits float32 4 IEEE 754-2008 binary32 float64 8 IEEE 754-2008 binary64 varuPTR Immediate TypeA varuPTR immediate 要么是varuint32要么是varuint64，取决于与指令相关的linear memory使用的是32-bit还是64-bit。 Array一个给定类型的array是一个代表元素数量的varuint32，后面接该数量的给定类型的元素。 Byte Array一个bytes的array。 Identifier一个有效的UTF-8的一个byte array。 Type Encoding Type一个type encoding是一个表示一个特别的language type的值。 Name Binary Encoding varsint7 i32 -0x01 0x7f i64 -0x02 0x7e f32 -0x03 0x7d f64 -0x04 0x7c anyfunc -0x10 0x70 func -0x20 0x60 void -0x40 0x40 Type encodings使用Binary Encoding值的varsint7类型来编码。 Language TypesValue TypesValue types是instructions 在执行时的单个输入和输出值的类型。 Integer Value TypesInteger value types描述固定宽度整数值。 Name Bits Description i32 32 32-bit integer i64 64 64-bit integer BooleansBoolean在WebAssembly中使用 i32的值来表示，非0值为true而0表示false。 Floating-Point Value TypesFloating-point value types描述了IEEE 754-2008中的浮点数值。 Name Bits Description f32 32 IEEE 754-2008 [binary32]，单精度 f64 64 IEEE 754-2008 [binary64]，双精度 Table Element TypesTable element types 是可能被使用在table中的类型。 Name Description anyfunc a reference to a function with any signature Signature TypesSignature types是可能被定义在Type Section中的类型。 Name Description func a function signature ModuleModule Contents一个module由一个header和跟在后面的若干个sections组成。 section 有两种: known section和custom section。 section由section opcode + content size（不包括section opcode和content size的size） + section contents组成。 header共8个bytes，由如下字段组成： 字段名 Type Description magic_cookie uint32 magic cookie 表面了文件是一个WebAssembly module必须是0x6d736100，编码为0x00 0x61 0x73 0x6D, 即字符串 “\\0asm” version uint32 WebAssembly 版本号必须是0x1，编码为0x01 0x00 0x00 0x00, Known SectionsType SectionOpcode: 0x01. Type Section由一个function signatures的array组成。 每个function signatures由以下字段组成： 字段名 类型 Description form signature type the type of signature 如果form是func(0x60) 则在后面加上如下字段： 字段名 Type Description params value type的array 输入参数 returns value type的array 返回值 如 0x60 0x01 0x7f 0x01 0x7f 为一个function signatures，代表了一个输入参数为一个i32类型，返回值也为i32类型的function。 Import SectionOpcode: 0x02. Import Section 由imports的array组成 import由以下字段组成： Field Name Type Description module_name identifier the name of the module to import from export_name identifier the name of the export in that module kind external kind the kind of import 如果kind是Function，将追加以下字段： Field Name Type Description sig_index varuint32 signature index into theType Section 如果kind是Table， 将追加以下字段： Field Name Type Description desc table description a description of the table 如果kind是Memory，将追加以下字段： Field Name Type Description desc linear-memory description a description of the linear memory 如果kind是Global，将追加以下字段： Field Name Type Description desc global description a description of the global variable 一个 import中的的 module_name和 export_name 的含义由embedding environment决定。 如：0x02 0x0D 0x01 0x03 0x65 0x6E 0x76 0x05 0x5F 0x5A 0x6E 0x77 0x6D 0x00 0x02 0x02是opcode，表示这是一个import section；0x0D是content size（13 bytes）；0x01表示一个import；0x03 0x65 0x6E 0x76表示module_name是0x65 0x6E 0x76 （“env”，size为0x03）；export_name为5F 5A 6E 77 6D（“_Znwm”，size为0x05）；0x00是kind，表示Function；0x02是追加的sig_index，表示该function在Type Section中的签名索引是2。 TODO: Function Section Table Section Linear-Memory Section Global Section Export Section Start Section Element Section Code Section Data Section Module Types这些类型描述了出现在Webassembly中的一些数据结构。 Resizable Limits Field Name Type Description flags varuint32 bit-packed flags minimum varuint32 最小长度(以table元素或pages为单位) 如果flags设为 0x1，将追加以下字段： Field Name Type Description maximum varuint32 最大长度(单位同minimum) 如果指定了maximum，必须不小于minimum。 Linear-Memory Description Field Name Type Description limits resizable limits linear-memory flags和sizes，使用pages为单位 Table Description Field Name Type Description element_type table element type table的元素类型 resizable resizable limits table的flags和sizes ，使用元素为单位 Global Description Field Name Type Description type value type 全局变量的类型 mutability varuint1 0为不可变 , 1为可变 External Kinds Name Binary Encoding Function 0x00 Table 0x01 Memory 0x02 Global 0x03 Instantiation-Time Initializers一个instantiation-time initializer 是单个instruction，可以是const或get_global TODO： instruction","link":"/2020/08/15/Webassembly%20struct/"},{"title":"Webassembly dynamic libraries main module &amp; side module","text":"Main modoule &amp; Side moduleThere are two types of shared modules: Main modules, which have system libraries linked in. Side modules, which do not have system libraries linked in. Side modules are created by including the SIDE_MODULE flag when compiler with Emscripten., will not generate the JavaScript file or include any system library functions in the module. Main modules are created using the MAIN_MODULE flag. This flag tells the Emscripten compiler to include system libraries for dynamic linking. How to create main module &amp; side moduleCoreA.cpp 123456789101112131415161718192021222324252627282930#ifdef __EMSCRIPTEN__#include&lt;emscripten.h&gt;#endif#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Multipy(int a, int b); //EMSCRIPTEN_KEEPALIVE forces LLVM to not dead-code-eliminate a function.This also exports the function, as if you added it to EXPORTED_FUNCTIONS.#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Add(int a, int b){ return a+b;}#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallMultipyInSideC(int a, int b){ return Multipy(a,b);}#ifdef __cplusplus}#endif SideB.cpp 1234567891011121314151617181920212223242526#include&lt;emscripten.h&gt;#include&lt;stdio.h&gt;#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Add(int a, int b);#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallAddInCoreA(int a, int b){ return Add(a,b);} #ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Substract(int a, int b){ return a-b;} #ifdef __cplusplus}#endif SideC.cpp 12345678910111213141516171819202122232425#include&lt;emscripten.h&gt;#include&lt;stdio.h&gt;#ifdef __cplusplusextern &quot;C&quot; {// So that the C++ compiler does not rename the functions below#endifextern int Substract(int a, int b);#ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint CallSubstractInSideB(int a, int b){ return Substract(a,b);} #ifdef __EMSCRIPTEN__ EMSCRIPTEN_KEEPALIVE#endifint Multipy(int a, int b){ return a*b;}#ifdef __cplusplus}#endif 12345emcc CoreA.cpp -O2 -s MAIN_MODULE=1 -s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME=CoreModule -s ALLOW_MEMORY_GROWTH=1 -fPIC -s EXPORT_ALL=1 -s EXTRA_EXPORTED_RUNTIME_METHODS=['ccall','stringToUTF8','UTF8ToString','loadDynamicLibrary'] -o CoreA.js//EXTRA_EXPORTED_RUNTIME_METHODS add 'loadDynamicLibrary' to manually load side module when you needemcc SideB.cpp -s SIDE_MODULE=2 -O2 -o SideB.wasmemcc SideC.cpp -s SIDE_MODULE=2 -O2 -o SideC.wasm Different options for dynamic linking1.dlopen2.dynamicLibraries3.loadDynamicLibrary","link":"/2020/08/16/Webassembly%20dynamic%20libraries/"}],"tags":[{"name":"WebAssembly","slug":"WebAssembly","link":"/tags/WebAssembly/"},{"name":"Emscripten","slug":"Emscripten","link":"/tags/Emscripten/"}],"categories":[{"name":"WebAssembly","slug":"WebAssembly","link":"/categories/WebAssembly/"},{"name":"Emscripten","slug":"Emscripten","link":"/categories/Emscripten/"}]}